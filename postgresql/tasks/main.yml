- name: Allow PostgreSQL RPM repository
  yum:
    name: "https://yum.postgresql.org/12/redhat/rhel-7.4-x86_64/pgdg-redhat-repo-latest.noarch.rpm"
    state: present

- name: Install PostgreSQL
  yum:
    name: ["postgresql12-server", "python-psycopg2"]
    state: present
  notify: "Init PostgreSQL"

- name: Force init PostgreSQL master
  meta: flush_handlers

- name: Update pg_hba.conf
  template:
    src: "pg_hba.conf"
    dest: "/var/lib/pgsql/12/data/pg_hba.conf"
    owner: postgres
    group: postgres
  notify: "Restart PostgreSQL"
  when: inventory_hostname in groups['master']

- name: Update PostgreSQL conf
  lineinfile:
    path: /var/lib/pgsql/12/data/postgresql.conf
    line: listen_addresses='*'
    create: yes
  notify: "Restart PostgreSQL"
  when: inventory_hostname in groups['master']

- name: Force restart PostgreSQL master
  meta: flush_handlers

- name: Create replication users
  become: yes
  become_user: postgres
  postgresql_user:
    name: "{{ replication_username }}"
    password: "{{ replication_username_password }}"
    role_attr_flags: "REPLICATION,LOGIN"
  when: inventory_hostname in groups['master']

- name: Launch replication
  no_log: yes
  become: yes
  become_user: postgres
  start_postgresql_slave:
    primary_hostname: postgresql_master
    replication_username: "{{ replication_username }}"
    password: "{{ replication_username_password }}"
  notify:
    - "Start PostgreSQL"
    - "Enabled PostgreSQL"
  when: inventory_hostname in groups['slave']

- name: Standby machine
  no_log: yes
  become: yes
  become_user: postgres
  start_postgresql_slave:
    primary_hostname: postgresql_slave
    replication_username: "{{ replication_username }}"
    password: "{{ replication_username_password }}"
  notify:
    - "Start PostgreSQL"
    - "Enabled PostgreSQL"
  when: inventory_hostname == "postgresql_backup"

- name: Force restart PostgreSQL master
  meta: flush_handlers

- name: Create database
  become: yes
  become_user: postgres
  postgresql_db:
    name: "{{ item.db }}"
  with_items: "{{ users }}"
  when: inventory_hostname in groups['master']

- name: Ex user
  become: yes
  become_user: postgres
  postgresql_user:
    db: "{{ item.db }}"
    name: "{{ item.name }}"
    password: "{{ item.password }}"
  with_items: "{{ users }}"
  when: inventory_hostname in groups['master']
